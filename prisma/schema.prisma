// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // user, admin
  status        String    @default("active") // active, inactive
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  chatHistory    ChatHistory[]
  comments       Comment[]
  notifications  Notification[]
  permissions    Permission[]
  auditLogs      AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  type        String   // pdf, docx, txt, etc.
  url         String
  size        Int?
  uploadedBy  String
  uploadedAt  DateTime @default(now())
  deletedAt   DateTime?
  status      String   @default("active") // active, deleted

  uploader       User             @relation(fields: [uploadedBy], references: [id])
  tags           DocumentTag[]
  versions       DocumentVersion[]
  permissions    Permission[]
  comments       Comment[]
  chatSources    ChatSource[]
}

model DocumentTag {
  documentId String
  tag        String

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@id([documentId, tag])
}

model DocumentVersion {
  id         String   @id @default(cuid())
  documentId String
  version    String
  uploadedAt DateTime @default(now())
  uploader   String
  changeLog  String?

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Permission {
  documentId String
  userId     String
  permission String // read, write, admin

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([documentId, userId])
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  question  String
  answer    String
  timestamp DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sources ChatSource[]
}

model ChatSource {
  historyId  String
  documentId String
  page       Int?
  url        String?

  history  ChatHistory @relation(fields: [historyId], references: [id], onDelete: Cascade)
  document Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@id([historyId, documentId])
}

model Comment {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  comment    String
  position   String? // For PDF annotations
  createdAt  DateTime @default(now())

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // document_shared, comment_added, etc.
  message   String
  relatedId String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // login, upload, delete, etc.
  userId    String
  targetId  String?
  timestamp DateTime @default(now())
  detail    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
